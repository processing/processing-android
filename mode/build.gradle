import java.nio.file.Files
import org.zeroturnaround.zip.ZipUtil
import org.apache.commons.io.FileUtils
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;


// Extend compile to copy the jars from gradle-tooling and slf4j:
// https://stackoverflow.com/a/43602463
configurations {
    implementation.extendsFrom implementationCopy
    implementation.extendsFrom implementationExtract
}

dependencies {
    // implementation group: "org.processing", name: "core", version: "${processingVersion}"
    // implementation group: "org.processing", name: "pde", version: "${processingVersion}"
    // implementation group: "org.processing", name: "java-mode", version: "${processingVersion}"

    implementationExtract "org.eclipse.jdt:org.eclipse.jdt.debug:${jdtVersion}"

    implementationCopy "org.gradle:gradle-tooling-api:${toolingVersion}"
    implementationCopy "org.slf4j:slf4j-api:${slf4jVersion}"
    implementationCopy "org.slf4j:slf4j-simple:${slf4jVersion}"

    implementation fileTree(include: ["jdi.jar", "jdimodel.jar", "core.jar", "pde.jar", "JavaMode.jar"], dir: 'mode')
}

// This task copies the gradle tooling jar into the mode folder
task copyToLib(type: Copy) {
  from configurations.implementationCopy.files
  into "mode"
}
build.dependsOn(copyToLib)
compileJava.dependsOn(copyToLib)

sourceSets {
    main {
        java {
            srcDirs = ["src/"]
        }
    }
}

task getjdi(type: Copy) {
  // This task extracts the jar files inside org.eclipse.jdt.debug, which are
  // jdi.jar and jdimodel.jar and needed to build the debugger.
  from(zipTree(configurations.implementationExtract.files[0])) {
    include '**/*.jar'
    exclude 'META-INF'
  }
  into "mode"  
}

task permissions(type:Exec) {
   // This task retrieves the latest list of Android permissions and adds them
   // to the Permissions.java file. The python scripts requries BeautifulSoup
   workingDir "scripts"
   commandLine "python", "permissions.py"
} 

task wrapper(type: Wrapper) {
   gradleVersion = "${gradlewVersion}" // version required for gradle wrapper
}

wrapper.doLast {
  File wrapperFolder = file("mode/gradlew");
  wrapperFolder.mkdirs();
  file("gradle").renameTo(file("mode/gradlew/gradle"))
  file("gradlew").renameTo(file("mode/gradlew/gradlew"))
  file("gradlew.bat").renameTo(file("mode/gradlew/gradlew.bat"))
  FileUtils.copyDirectory(file("gradle"), file("../debug/gradle"))
  delete "gradle"
  ZipUtil.pack(file("mode/gradlew"), new File("mode/mode/gradlew.zip"));    
  delete "mode/gradlew"    
}

clean.doFirst {
    delete fileTree("mode") {
        include "**/*.jar"
        exclude "jdi.jar"
        exclude "jdimodel.jar"
        exclude "istack-commons-runtime.jar"
        exclude "javax.activation-api.jar"
        exclude "jaxb-api.jar"
        exclude "jaxb-jxc.jar"
        exclude "jaxb-runtime.jar"
        exclude "jaxb-xjc.jar"
        exclude "core.jar"
        exclude "pde.jar"
        exclude "JavaMode.jar"
        exclude "org.eclipse.core.contenttype.jar"
        exclude "org.eclipse.core.jobs.jar"
        exclude "org.eclipse.core.resources.jar"
        exclude "org.eclipse.core.runtime.jar"
        exclude "org.eclipse.equinox.common.jar"
        exclude "org.eclipse.equinox.preferences.jar"
        exclude "org.eclipse.jdt.core.jar"
        exclude "org.eclipse.osgi.jar"
        exclude "org.eclipse.text.jar"
    }
}

build.doLast {
    Files.copy(file("$buildDir/libs/mode.jar").toPath(),
               file("mode/AndroidMode.jar").toPath(), REPLACE_EXISTING);
}
